İlk başta, gerekli kütüphaneleri ve modülleri import ediyoruz:
python
Copy code
import numpy as np
import requests
from bs4 import BeautifulSoup
from sklearn.linear_model import LogisticRegression
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score
from deep_learning_model import create_deep_learning_model
import sys
from PyQt5.QtWidgets import QApplication, QWidget, QVBoxLayout, QTextEdit, QLabel, QPushButton
from PyQt5.QtCore import QTimer
Bu kısımda, kullanacağımız kütüphaneleri ve modülleri import ediyoruz. Örneğin, numpy ile sayısal hesaplamalar yapmak için, requests ile web istekleri göndermek için, BeautifulSoup ile HTML içeriğini işlemek için, sklearn ile makine öğrenimi modelleri ve metrikleri kullanmak için ve PyQt5 ile bir kullanıcı arayüzü oluşturmak için kütüphaneleri import ediyoruz.

Ardından, App adında bir QWidget alt sınıfı tanımlıyoruz:
python
Copy code
class App(QWidget):

    def __init__(self):
        super().__init__()
        self.initUI()

    def initUI(self):
        self.setWindowTitle('Bitcoin Duygu Analizi')
        self.setGeometry(300, 300, 600, 400)

        layout = QVBoxLayout()

        self.log_text = QTextEdit(self)
        self.log_text.setReadOnly(True)
        layout.addWidget(self.log_text)

        self.btc_label = QLabel(self)
        layout.addWidget(self.btc_label)

        self.sentiment_label = QLabel(self)
        layout.addWidget(self.sentiment_label)

        self.start_button = QPushButton("Başlat", self)
        self.start_button.clicked.connect(self.start_analysis)
        layout.addWidget(self.start_button)

        self.setLayout(layout)
Bu sınıf, kullanıcı arayüzünü oluşturur. initUI metodunda, pencere başlığını, boyutunu ve düzenini ayarlıyoruz. Ardından, bir QVBoxLayout düzeni oluşturuyoruz ve bu düzenin içine metin girişi (QTextEdit), etiketler (QLabel) ve bir düğme (QPushButton) ekliyoruz. Bu bileşenlerin her biri kullanıcı arayüzünde görüntülenecek.

Daha sonra, analizi başlatmak için kullanılacak metodları tanımlıyoruz:
python
Copy code
    def start_analysis(self):
        self.start_button.setEnabled(False)
        self.start_button.setText("Analiz Başladı")
        self.timer = QTimer()
        self.timer.timeout.connect(self.update_info)
        self.timer.start(60000)  # 1 dakika
        self.update_info()

    def update_info(self):
        # Burada Twitter'dan tweetleri alın, duygu analizini yapın ve Bitcoin fiyatını elde edin.
        # Örnek olarak şu anlık değerler kullanıyoruz:
        tweets = ["Örnek Tweet 1", "Örnek Tweet 2", "Örnek Tweet 3"]
        sentiment = 0.1
        bitcoin_price = 50000

        self.log_text.clear()
        for i, tweet in enumerate(tweets):
            self.log_text.append(f"{i + 1}. {tweet}")

        self.btc_label.setText(f"Anlık Bitcoin Fiyatı: ${bitcoin_price}")
        self.sentiment_label.setText(f"Twitter'daki Duygu Analizi Sonucu: {sentiment}")
start_analysis metodunda, analizi başlatmak için kullanılan düğme tıklandığında çağrılır. Düğmeyi devre dışı bırakır, metnini günceller ve bir QTimer oluşturarak belirli aralıklarla update_info metodunu çağırır. update_info metodunda, örnek olarak tweetler, duygu analizi sonucu ve Bitcoin fiyatı gibi anlık değerler kullanılarak kullanıcı arayüzünü günceller. Örnekteki değerler yerine gerçek verileri almanız gerekecektir.

Sonraki bölümde, etiketli verileri oluşturuyoruz:
python
Copy code
# Örnek etiketli veri (duygu analizi değeri ve Bitcoin fiyatındaki değişime göre etiketler)
data = np.array([
    [0.1, 1],
    [-0.2, 0],
    [0.3, 1],
    [-0.4, 0],
    [0.2, 1],
    [-0.1, 0],
])

X = data[:, 0].reshape(-1, 1)  # Duygu analizi değerleri
y = data[:, 1]  # Etiketler (0: düşüş, 1: artış)
Bu bölümde, bir örnek veri seti oluşturuyoruz. data adlı bir NumPy dizisi kullanarak, duygu analizi değeri ve Bitcoin fiyatındaki değişime göre etiketleri içeren veri setini oluşturuyoruz. Daha sonra, X ve y değişkenlerine sırasıyla duygu analizi değerlerini ve etiketleri atıyoruz.

Veri setini eğitim ve test veri setlerine bölen kısım:
python
Copy code
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
train_test_split fonksiyonunu kullanarak veri setini eğitim ve test veri setlerine ayırıyoruz. X_train, X_test, y_train ve y_test değişkenlerine sırasıyla eğitim ve test için gerekli olan giriş ve çıkış verilerini atıyoruz. Veri setinin %80'i eğitim için kullanılacak ve %20'si test için kullanılacak şekilde bölünüyor.

Derin öğrenme modelini oluşturma ve eğitme kısmı:
python
Copy code
model = create_deep_learning_model(input_dim=1)
model.fit(X_train, y_train, epochs=50, batch_size=1, verbose=0)
create_deep_learning_model fonksiyonunu kullanarak bir derin öğrenme modeli oluşturuyoruz. Bu fonksiyonun ayrıntıları kodda görünmüyor, ancak derin öğrenme modelini tanımladığınız ve eğittiğiniz yerdir. Oluşturulan modeli, X_train ve y_train verileriyle eğitiyoruz. Eğitim için 50 epoch ve 1'lik bir batch boyutu kullanılıyor.

Lojistik regresyon modelini eğitme kısmı:
python
Copy code
model = LogisticRegression()
model.fit(X_train, y_train)
LogisticRegression sınıfını kullanarak bir lojistik regresyon modeli oluşturuyoruz ve X_train ve y_train verileriyle eğitiyoruz.

Modelin doğruluğunu test etme kısmı:
python
Copy code
y_pred = (model.predict(X_test) > 0.5).astype('int32')
accuracy = accuracy_score(y_test, y_pred)
print(f"Model doğruluğu: {accuracy}")
X_test verilerini kullanarak oluşturulan modelin tahminlerini alıyoruz ve bu tahminleri etiketlere dönüştürerek y_pred değişkenine atıyoruz. Daha sonra, bu tahminleri gerçek etiketlerle karşılaştırarak modelin doğruluğunu hesaplıyoruz ve ekrana yazdırıyoruz.

Sonraki bölüm, Twitter'dan tweetleri almak, duygu analizini yapmak ve Bitcoin fiyatını almak için kullanılan kodu içerir:
python
Copy code
import time
import nltk
from nltk.sentiment import SentimentIntensityAnalyzer
from pycoingecko import CoinGeckoAPI

from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.edge.options import Options
from selenium.webdriver.edge.service import Service

nltk.download('vader_lexicon')  # VADER lexicon'u indir

edge_options = Options()
edge_options.add_experimental_option("excludeSwitches", ["enable-automation"])
edge_options.add_argument("--disable-extensions")
edge_options.add_argument("--disable-gpu")
edge_options.add_argument("--no-sandbox")
edge_options.add_argument("--disable-dev-shm-usage")
edge_options.add_argument("--remote-debugging-port=9222")
edge_options.add_argument("--user-data-dir=./edge-user-data")
edge_options.add_argument('--log-level=3')  # 3: ERROR, 2: WARNING, 1: INFO, 0: DEBUG

service = Service("msedgedriver.exe")
driver = webdriver.Edge(service=service, options=edge_options)  # EDGEdriver yolunu düzenleyin

def manual_login_to_twitter(driver):
    login_url = "https://twitter.com/login"
    driver.get(login_url)
    time.sleep(3)

    print("Lütfen tarayıcıda Twitter'a giriş yapın ve devam etmek için Enter tuşuna basın.")
    input()

def get_tweets_scraping(driver, search_term="bitcoin", count=100):
    url = f"https://twitter.com/search?q={search_term}&src=typed_query"
    driver.get(url)
    time.sleep(3)

    tweet_texts = []
    for _ in range(count // 20):
        tweets = driver.find_elements(By.CSS_SELECTOR, "article div[lang='en']")
        for tweet in tweets:
            tweet_texts.append(tweet.text)
            if len(tweet_texts) >= count:
                break
        if len(tweet_texts) < count:
            driver.execute_script("window.scrollTo(0, document.body.scrollHeight);")
            time.sleep(3)

    return tweet_texts[:count]

def analyze_sentiment(tweets):
    if len(tweets) == 0:
        return 0

    sentiment = 0
    sia = SentimentIntensityAnalyzer()
    for tweet in tweets:
        sentiment_score = sia.polarity_scores(tweet)
        sentiment += sentiment_score['compound']
    return sentiment / len(tweets)

def get_bitcoin_price():
    cg = CoinGeckoAPI()
    bitcoin_data = cg.get_price(ids='bitcoin', vs_currencies='usd')
    return bitcoin_data['bitcoin']['usd']

manual_login_to_twitter(driver)

while True:
    tweets = get_tweets_scraping(driver)
    sentiment = analyze_sentiment(tweets)
    bitcoin_price = get_bitcoin_price()
    print(f"Anlık Bitcoin Fiyatı: ${bitcoin_price}")
    print(f"Twitter'daki Duygu Analizi Sonucu: {sentiment}")

    print("\nAnaliz Edilen Tweetler:")
    for i, tweet in enumerate(tweets):
        print(f"{i+1}. {tweet}")

    if sentiment > 0:
        print("Duygu analizi pozitif olduğu için fiyat artabilir.")
    elif sentiment < 0:
        print("Duygu analizi negatif olduğu için fiyat düşebilir.")
    else:
        print("Duygu analizi nötr olduğu için fiyat değişimi öngörülemiyor.")
    
    time.sleep(60)  # 1 dakika bekle
Bu bölümde, Twitter'dan tweetleri almak, duygu analizini yapmak ve Bitcoin fiyatını almak için gerekli olan işlevleri ve kodu içerir. Ayrıntıları aşağıda bulabilirsiniz:

manual_login_to_twitter: Tarayıcıda Twitter'a giriş yapmanızı ve devam etmek için Enter tuşuna basmanızı sağlayan bir işlevdir.
get_tweets_scraping: Selenium kütüphanesi kullanılarak Twitter'dan belirli bir arama terimi için tweetleri çeken bir işlevdir. İlgili tweetleri sayfa kaydırma işlemi yaparak çeker.
analyze_sentiment: Tweetlerin duygu analizini yapar ve ortalama duygu skorunu döndürür. VADER (Valence Aware Dictionary and sEntiment Reasoner) lexiconunu kullanır.
get_bitcoin_price: CoinGeckoAPI kullanarak Bitcoin'in anlık fiyatını alır.
manual_login_to_twitter işlevi çağrılarak kullanıcının Twitter'a giriş yapması beklenir.
Daha sonra, while True döngüsü içinde tweetleri çeker, duygu analizini yapar, Bitcoin fiyatını alır ve sonuçları ekrana yazdırır. Bu döngü her bir dakikada bir tekrarlanır (time.sleep(60)).
